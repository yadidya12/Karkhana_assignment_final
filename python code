import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import dblquad

class MobiusStrip:
    def __init__(self, R, w, n):
        self.R = R
        self.w = w
        self.n = n
        self.u = np.linspace(0, 2 * np.pi, n)
        self.v = np.linspace(-w/2, w/2, n)
        self.mesh = self.generate_mesh()

    def parametric_equations(self, u, v):
        x = (self.R + v * np.cos(u / 2)) * np.cos(u)
        y = (self.R + v * np.cos(u / 2)) * np.sin(u)
        z = v * np.sin(u / 2)
        return x, y, z

    def generate_mesh(self):
        U, V = np.meshgrid(self.u, self.v)
        X, Y, Z = self.parametric_equations(U, V)
        return X, Y, Z

    def compute_surface_area(self):
        def integrand(u, v):
            xu, xv = np.gradient(self.parametric_equations(u, v)[0])
            yu, yv = np.gradient(self.parametric_equations(u, v)[1])
            zu, zv = np.gradient(self.parametric_equations(u, v)[2])
            normal_magnitude = np.sqrt(
                (yu * zv - zu * yv) ** 2 +
                (zu * xv - xu * zv) ** 2 +
                (xu * yv - yu * xv) ** 2
            )
            return normal_magnitude

        area, _ = dblquad(integrand, 0, 2*np.pi, lambda u: -self.w/2, lambda u: self.w/2)
        return area

    def compute_edge_length(self):
        edge_length = 2 * np.pi * np.sqrt(self.R**2 + (self.w / 2)**2)
        return edge_length

    def plot_strip(self):
        X, Y, Z = self.mesh
        fig = plt.figure(figsize=(8, 6))
        ax = fig.add_subplot(111, projection='3d')
        ax.plot_surface(X, Y, Z, color='cyan', edgecolor='black')
        ax.set_xlabel('X')
        ax.set_ylabel('Y')
        ax.set_zlabel('Z')
        ax.set_title('MÃ¶bius Strip')
        plt.show()

# Example usage
mobius_strip = MobiusStrip(R=3, w=1, n=100)
mobius_strip.plot_strip()
print(f"Approximated Surface Area: {mobius_strip.compute_surface_area():.4f}")
print(f"Edge Length: {mobius_strip.compute_edge_length():.4f}")
